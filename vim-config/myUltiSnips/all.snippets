priority -10

# Reference: https://github.com/honza/vim-snippets/blob/master/UltiSnips/all.snippets

global !p

LOREM = """\
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod \
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At \
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, \
no sea takimata sanctus est Lorem ipsum dolor sit amet.
"""

def _parse_comments(s):
	""" Parses vim's comments option to extract comment format """
	i = iter(s.split(","))

	rv = []
	try:
		while True:
			# get the flags and text of a comment part
			flags, text = next(i).split(':', 1)

			if len(flags) == 0:
				rv.append(('OTHER', text, text, text, ""))
			# parse 3-part comment, but ignore those with O flag
			elif 's' in flags and 'O' not in flags:
				ctriple = ["TRIPLE"]
				indent = ""

				if flags[-1] in string.digits:
					indent = " " * int(flags[-1])
				ctriple.append(text)

				flags, text = next(i).split(':', 1)
				assert flags[0] == 'm'
				ctriple.append(text)

				flags, text = next(i).split(':', 1)
				assert flags[0] == 'e'
				ctriple.append(text)
				ctriple.append(indent)

				rv.append(ctriple)
			elif 'b' in flags:
				if len(text) == 1:
					rv.insert(0, ("SINGLE_CHAR", text, text, text, ""))
	except StopIteration:
		return rv

def get_comment_format():
	""" Returns a 4-element tuple (first_line, middle_lines, end_line, indent)
	representing the comment format for the current file.

	It first looks at the 'commentstring', if that ends with %s, it uses that.
	Otherwise it parses '&comments' and prefers single character comment
	markers if there are any.
	"""
	commentstring = vim.eval("&commentstring")
	if commentstring.endswith("%s"):
		c = commentstring[:-2]
		return (c.rstrip(), c.rstrip(), c.rstrip(), "")
	comments = _parse_comments(vim.eval("&comments"))
	for c in comments:
		if c[0] == "SINGLE_CHAR":
			return c[1:]
	return comments[0][1:]


def make_box(twidth, bwidth=None, is_closed=True):
	b, m, e, i = (s.strip() for s in get_comment_format())
	m0 = m[0] if m else ''
	bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth
	sline = b + m + bwidth_inner * m0 + 2 * m0
	nspaces = (bwidth_inner - twidth) // 2
	mlines = i + m + " " + " " * nspaces
	mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
	eline = i + m + bwidth_inner * m0 + 2 * m0 + e
	if not is_closed:
		mlines = i + m + " "
		mlinee = ""
	return sline, mlines, mlinee, eline

def make_line(length = 40):
	b, m, e, i = (s.strip() for s in get_comment_format())
	ret = b + " " + "=" * length
	if b != e:
		ret += " " + e
	return ret

endglobal

# ========================================

snippet line "A line consists of serveral ="
`!p snip.rv = make_line()`
$0
endsnippet

snippet test "A line consists of serveral ="
`!p snip.rv = str(get_comment_format())`
$0
endsnippet

snippet box "A full-width comment box with the right side open and text left-aligned" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
box = make_box(len(t[1]), width, is_closed=False)
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet boxc "A full-width comment box with the right side closed and text center-aligned" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet sboxc "A small comment box with the right side closed" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
snip.rv = box[2]
snip += box[3]`
$0
endsnippet


snippet date "YYYY-MM-DD" w
`!v strftime("%Y-%m-%d")`
endsnippet

snippet ddate "Month DD, YYYY" w
`!v strftime("%b %d, %Y")`
endsnippet

snippet diso "ISO format datetime" w
`!v strftime("%Y-%m-%dT%H:%M:%S%z")`
endsnippet

snippet time "hh:mm" w
`!v strftime("%H:%M")`
endsnippet

snippet datetime "YYYY-MM-DD hh:mm" w
`!v strftime("%Y-%m-%d %H:%M")`
endsnippet

snippet lorem "Lorem Ipsum" b
`!p snip.rv = LOREM`
endsnippet
