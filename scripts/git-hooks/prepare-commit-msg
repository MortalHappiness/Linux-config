#!/usr/bin/env bash
#
# Git hook to generate commit message.
# Features:
# - Parse GitHub issue name or JIRA ticket name from git branch name.

################################################################################
# Variables
################################################################################


COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BRANCH_NAME=$(git symbolic-ref --short HEAD 2>/dev/null)
BRANCH_NAME_REGEX="\/(#[0-9]+|[A-Z]+-[0-9]+)-"
FUNCION_OVERRIDE_SCRIPT="$SCRIPT_DIR/prepare-commit-msg-override.sh"

################################################################################
# Variables and Functions that can be overridden
################################################################################

read -d '' BOTTOM_COMMENT << EOF
# type:
# - build
# - chore
# - ci
# - docs
# - feat
# - fix
# - perf
# - refactor
# - revert
# - style
# - test
EOF

function get_commit_header() {
    echo "type(scope): description"
}

function get_issue_or_ticket_number_message() {
    local issue_or_ticket_no=$1
    if [[ "${issue_or_ticket_no:0:1}" == "#" ]]; then
        # Assume repo root is the repo name on GitHub
        # And parent directory is the organization name
        local repo_root=$(git rev-parse --show-toplevel)
        local repo_parent_dir=$(dirname "${repo_root}")
        local repo_name=$(basename "${repo_root}")
        local org_name=$(basename "${repo_parent_dir}")
        issue_or_ticket_no="${org_name}/${repo_name}${issue_or_ticket_no}"
    fi
    echo "Closes: ${issue_or_ticket_no}"
}

################################################################################
# Implementation
################################################################################

# Source the function override script if it exists
if [ -f "$FUNCION_OVERRIDE_SCRIPT" ]; then
    source "$FUNCION_OVERRIDE_SCRIPT"
fi

# Only proceed if it is a normal commit opened from the editor
if [[ "$COMMIT_SOURCE" =~ ^(message|template|merge|squash)$ ]] || [ -n "$SHA1" ] || [ -z "$BRANCH_NAME" ]; then
    exit 0
fi

COMMIT_HEADER=$(get_commit_header)

# Parse issue or ticket number from branch name
if [[ $BRANCH_NAME =~ $BRANCH_NAME_REGEX ]]; then
    ISSUE_OR_TICKET_NUMBER_MSG=$(get_issue_or_ticket_number_message "${BASH_REMATCH[1]}")
else
    ISSUE_OR_TICKET_NUMBER_MSG="#XXX: Cannot parse issue or ticket number from branch name"
fi

# Generate the commit message
read -d '' COMMIT_MESSAGE << EOF
${COMMIT_HEADER}

${ISSUE_OR_TICKET_NUMBER_MSG}
# ========================================
${BOTTOM_COMMENT}
EOF

# Write the final commit message to the commit message file
echo "$COMMIT_MESSAGE" > "$COMMIT_MSG_FILE"
